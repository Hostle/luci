#!/usr/bin/lua

--[[ wifimanger main module ]]--

-- Version 1.01.1
-- By Hostle 2/29/2016

--## DEPENDENTS ##--
require ("uci")
require ("iwinfo")
local nix = require ("nixio")
local net = require ("WifiManager.functions")
local util = require ("luci.util")
local sys = require ("luci.sys")

--## VERSION INFO ##--
local version = "1.01.1"

--## LOCAL FLAGS ##--
local verbose = 0
local boot_flag = 0
local abort = 0

--## LOCAL VARS ##--
local uci = uci.cursor()
local ping_addr = uci:get("wifimanager", "conn", "PingLocation")
local boot_tries = tonumber(uci:get("wifimanager", "conn", "boot_tries"))
local net_tries = tonumber(uci:get("wifimanager", "conn", "net_tries"))
local new_nets = tonumber(uci:get("wifimanager", "conn", "new_nets"))
local log_lev = tonumber(uci:get("wifimanager", "conn", "log_lev"))
local ap_mode = tonumber(uci:get("wifimanager", "ap", "ap_mode"))
local last_sta = net.get_ssid()
local new_sta

--## START TIMES ##--
local conn_time = os.time()
local ap_time = os.time()
local sta_time = os.time()

--## TIME LIMITS ##--
local conn_int = tonumber(uci:get("wifimanager", "conn", "ConnCheckTimer"))
local ap_int = 6 --tonumber(uci:get("wifimanager", "conn", "ConnCheckTimer"))
local sta_int = 4 --tonumber(uci:get("wifimanager", "conn", "ConnCheckTimer"))

--## OPTIONS MENU ##--
local help_msg = "\n\t\t\t  Wifi Manager ( "..version.." )\n\n\t\t\t ###### OPTIONS ######\n\t\t\t #####################\n\t\t\t # -h Print Help     #\n\t\t\t # -v Verbose Mode   #\n\t\t\t # -d Debugging Mode #\n\t\t\t # -s Version Info   #\n\t\t\t #####################\n\n"

--## logger ##-- 
--[[ 1 = alert, 2 = crit, 3 = notice, 4 = warn, 5 = notice, 6 = info, 7 = debug, 8 = notice, 9 = alert ]]--
local function logger(lev,msg)
  local log = sys.exec("logger -p daemon."..lev.." "..msg.." -t WifiManager")
 return
end
  
--## MAIN THREAD ##--
main = function()
  while true do

  --## INTAIAL BOOT, WAIT FOR NETWORK TO COME UP##--
  if (boot_flag == 0) then
    if (verbose > 0) then io.write("BOOT THREAD STATE: { WORKING } ...") end
    local essid = net.get_ssid()
    logger(1,"STARTING WIFI MANAGER [ BOOT FUNCTION ]")
    logger(1,"WAITING FOR NETWORK [ BOOT FUNCTION ]")
    repeat
      local up = net.net_status()
    until up 
    boot_flag = 1
    logger(6,"WWAN NETWORK IS UP")
    logger(1,"CURRENT SSID: "..essid:upper())
	logger(6,"CHECKING FOR INTERNET CONNECTION [ BOOT FUNCTION ]")
	if essid ~= "disabled" and net.conn_test(boot_tries) then 
	  logger(1,"INTERNET CONNECTION TEST PASSED [ BOOT FUNCTION ]")
	else
	  logger(1,"INTERNET CONNECTION TEST FAILED [ BOOT FUNCTION ]")
	  logger(1,"SEARCHING FOR AVAILABLE NETWORKS [ BOOT FUNCTION ]")
	  if net.config_check("wireless") or (abort >= 3) then
	    abort = 0
	    net.find_network(essid)
	  end
	end
  if (verbose > 0) then msg =" ALL TASK FINISHED SUCCESSFULLY" io.write("\27[32m"..msg.."\27[0m\n") end    
  end
   

    --## CONNECTION TEST THREAD ##--
    local c = os.difftime(os.time(),conn_time)
    local essid = net.get_ssid()
    if (verbose > 0) then
      if (c >= conn_int) then 
        io.write("CONN THREAD STATE: { WORKING } ...")
      else
        print(string.format("CONN THREAD\t{ CURRENT COUNT:%d | INTERVAL: %d }",c,conn_int))
      end
    end
    if (c >= conn_int) then
      if (log_lev > 0) then logger(6,"CURRENTLY CONNECTED TO { "..essid:upper().." }") end
        if essid ~= "disabled" and net.conn_test(net_tries) then
		  logger(1,"INTERNET CONNECTION TEST PASSED [ CONN THREAD ]")
		else
		  logger(1,"INTERNET CONNECTION TEST FAILED [ CONN THREAD ]")
          if net.config_check("wireless") or (abort >= 3) then
            abort = 0
            net.find_network(essid)
          else
	        logger(2,"WIRELESS CONFIG HAS PENDING CHANGES ... ABORTING !! [ CONN THREAD ]")
            abort = abort + 1
            logger(2,"ABORT COUNT: "..abort.." [ CONN THREAD ]")
	  nix.nanoslepp(1,0)
          end
        end
     if (verbose > 0) then msg =" ALL TASK FINISHED SUCCESSFULLY" io.write("\27[32m"..msg.."\27[0m\n") end    
     conn_time = os.time()
    end
	
	--## STA THREAD ##--
    local s = os.difftime(os.time(),sta_time)
    if (verbose > 0) then
      if (s >= sta_int) then 
        io.write("STA THREAD STATE: { WORKING } ...")
      else
        print(string.format("STA THREAD\t{ CURRENT COUNT:%d | INTERVAL: %d }",s,sta_int))
      end
    end
    if (s >= sta_int) then
	  local sec = net.sta_sec()
	  local new_sta = net.get_ssid()
	  
	  if new_sta ~= last_sta then
	    logger(2,"STA SSID HAS CHANGED [ "..new_sta.." ]  [ STA THREAD ]")
	  end
	  last_sta = new_sta
	  if (tonumber(new_nets) == 1 ) then 
	    net.add_sta() 
	  end
    if (verbose > 0) then msg =" ALL TASK FINISHED SUCCESSFULLY" io.write("\27[32m"..msg.."\27[0m\n") end     
    sta_time = os.time()
    end
	
	--## AP THREAD ##--
    local a = os.difftime(os.time(),ap_time)
    if (verbose > 0) then
      if (a >= ap_int) then 
        io.write("AP THREAD STATE: { WORKING } ...")
      else
        print(string.format("AP THREAD\t{ CURRENT COUNT:%d | INTERVAL: %d }",a,ap_int))
      end
    end
    if (a >= ap_int) then
	  local sec = net.ap_sec()
	  
	  if not sec and (ap_mode == 1) then
	  
		if net.config_check("wireless") or (abort >= 3) then
		  abort = 0
		  net.add_ap()
		else
		  logger(2,"WIRELESS CONFIG HAS PENDING CHANGES ... ABORTING !! [ AP THREAD ]")
		  abort = abort + 1
		  logger(2,"ABORT COUNT: "..abort.." [ AP THREAD ] ")
		  nix.nanosleep(1,0)
		end
	  end
     if (verbose > 0) then msg =" ALL TASK FINISHED SUCCESSFULLY" io.write("\27[32m"..msg.."\27[0m\n") end   
     ap_time = os.time()
    end
    coroutine.yield()
  end
end

--## CMD LINE OPIONS ##--
if #arg > 0 then
  if arg[1] == "-h" then
    print(help_msg)
    return
  elseif arg[1] == "-v" then
    print("Verbose mode")
    verbose = 1
  elseif arg[1] == "-d" then
    print("Debug mode")
    debug = 1
  elseif arg[1] == "-s" then
    print(version)
    return
  else
    print(help_msg)
  end
end

--## START OF PROGRAM ##--
main_thread=coroutine.create(main)
coroutine.resume(main_thread)
--## POST STATUS ON INITIAL STARTUP ##--
while coroutine.status(main_thread)~="dead" do
  if(verbose > 0 ) then
    print("\nCHECKING TIMER THREADS ...",select(2,coroutine.resume(main_thread)))
    print("CONN THREAD STATE: { "..coroutine.status(main_thread).." }")
    print("STA THREAD STATE: { "..coroutine.status(main_thread).." }")
    print("AP THREAD STATE: { "..coroutine.status(main_thread).." }\n")
    local mem = collectgarbage('count')*1024
    local tc 
    if (mem > 199000) and (mem < 201000) then 
      tc = 93
    elseif (tonumber(mem) > 200000) then
      tc = 91
    else
      tc = 92
    end
    --## 91 red, 93 yellow, 92 green
    io.write("TOTAL MEMORY USAGE: ")
    io.write("\27["..tc.."m"..mem.."kb\27[0m\n")
    collectgarbage()
    nix.nanosleep(1,0)
  else
    nix.nanosleep(1,0)
    select(2,coroutine.resume(main_thread))
  end
end
