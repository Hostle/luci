#!/usr/bin/lua

--[[ WIFIMANGER DAEMON ]]--

-- Version 1.02
-- By Hostle 3/13/2016

--## DEPENDENTS ##--
require ("uci")
local uci = uci.cursor()
local func = require ("wifimanager.functions")
local logger = require ("wifimanager.logger")
local mac = require ("wifimanager.mac")
local nix = require ("nixio")
local net = require ("wifimanager.status")

--## VERSION INFO ##--
local version = "1.02"

--## LOCAL FLAGS ##--
local verbose = 0
local boot = 0
local net_flag = 0
local status

--## START TIMES ##--
local conn_time = os.time()

--## TIME LIMITS ##--
local conn_int = tonumber(uci:get("wifimanager", "conn", "ConnCheckTimer"))
  
--## MAIN THREAD ##--
main = function()
 while true do
    if net.sta_valid() then net_flag = 1 end
    --## INTAIAL BOOT, WAIT FOR NETWORK TO COME UP##--
    --## CONN THREAD ##--
    local c = os.difftime(os.time(),conn_time)
   if (verbose > 0) then
      if (c >= conn_int) or (boot < 1) or (net_flag > 0) then
        local msg = "MAIN THREAD STATE: { WORKING } ..."
	io.write("\27[94m"..msg.."\27[0m")
      else
        print(string.format("MAIN THREAD\t{ CURRENT COUNT:%d | INTERVAL: %d }",c,conn_int))
      end
    end
    if (net_flag > 0) or (c >= conn_int) or (boot < 1) then
      if (boot < 1) then logger.log(1,"STARTING WIFI MANAGER "..version) mac.check() end
      if (boot < 1) then 
        status = func.run("boot") 
      else
        status = func.run()
      end        
      boot = 1
      if (verbose > 0) and status ~= false then 
        local msg ="ALL TASK FINISHED SUCCESSFULLY" io.write("\27[92m"..msg.."\27[0m\n")
        net_flag = 0 
      else
        local msg ="ERRORS OCCURRED CHECK LOG !! " io.write("\27[91m"..msg.."\27[0m\n") 
     end
      conn_time = os.time()
    end
    coroutine.yield()
  end
end

--## CMD LINE OPIONS ##--
if #arg > 0 then
  if arg[1] == "-h" then
    print(help_msg)
    return
  elseif arg[1] == "-v" then
    print("Verbose mode")
    verbose = 1
  elseif arg[1] == "-d" then
    print("Debug mode")
    debug = 1
  elseif arg[1] == "-s" then
    print(version)
    return
  else
    print(help_msg)
  end
end

--## START OF PROGRAM ##--
main_thread=coroutine.create(main)
coroutine.resume(main_thread)
print(coroutine.status(main_thread))
--## VERBOSE OUTPUT ##--
while coroutine.status(main_thread)~="dead" do
  if(verbose > 0 ) then
    print("\nCHECKING THREADS ...",select(2,coroutine.resume(main_thread)))

    local mem = collectgarbage('count')*5.12
    local tc 
    if (mem >= 100900) and (mem <= 104999) then 
      tc = 93
    elseif (mem >= 105000) then
      tc = 91
    else
      tc = 92
    end
    --## 91 red, 93 yellow, 92 green
    io.write("TOTAL MEMORY USAGE: ")
    io.write("\27["..tc.."m( "..mem.." kb )\27[0m\n")
    collectgarbage()
    nix.nanosleep(1,0)
  else
    nix.nanosleep(1,0)
    select(2,coroutine.resume(main_thread))
    collectgarbage()
  end
end
